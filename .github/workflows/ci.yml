name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  NODE_VERSION: "20.19.5"
  COVERAGE_THRESHOLD: 80

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.coverage.outputs.coverage }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm test
        id: test
      
      - name: Run tests with coverage
        run: npm run test:coverage
        id: coverage
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
        id: lint
      
      - name: Run Prettier check
        run: npm run format:check
        id: prettier

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript type check
        run: npm run type-check
        id: type-check

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [type-check]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: |
            package-lock.json
            dashboard/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install dashboard dependencies
        run: cd dashboard && npm ci
      
      - name: Build application
        run: npm run build
        id: build
      
      - name: Build dashboard
        run: npm run build:dashboard
        id: build-dashboard
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            dashboard/build/

  security:
    name: Security Scans
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --audit-level moderate
        id: npm-audit
      
      - name: Run enhanced npm audit
        run: npm audit --audit-level moderate --json > npm-audit-results.json || true
        id: npm-audit-enhanced
        continue-on-error: true
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
        id: trivy-scan
        continue-on-error: true
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.trivy-scan.outcome == "success"
        with:
          sarif_file: "trivy-results.sarif"

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run coverage check
        run: npm run coverage:check
        id: coverage-check
      
      - name: Generate coverage report
        run: npm run coverage:report
        id: coverage-report
      
      - name: Comment coverage on PR
        if: github.event_name == "pull_request"
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Run integration tests
        run: npm run test:integration
        id: integration-test
        env:
          NODE_ENV: test

  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Run E2E tests
        run: npm run test:e2e
        id: e2e-test
        env:
          NODE_ENV: test

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build, test, lint, type-check, security]
    if: github.event_name == "pull_request"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Deploy to preview environment
        run: echo "Deploy preview would go here"
        id: deploy-preview

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, lint, type-check, build, security, coverage]
    if: always()
    
    steps:
      - name: Notify on success
        if: ${{ needs.test.result == "success" && needs.lint.result == "success" && needs.type-check.result == "success" && needs.build.result == "success" && needs.security.result == "success" && needs.coverage.result == "success" }}
        run: echo "All checks passed! ✅"
      
      - name: Notify on failure
        if: ${{ needs.test.result == "failure" || needs.lint.result == "failure" || needs.type-check.result == "failure" || needs.build.result == "failure" || needs.security.result == "failure" || needs.coverage.result == "failure" }}
        run: echo "Some checks failed! ❌"
